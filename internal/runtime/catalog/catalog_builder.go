/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package catalog

import (
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// Builder builds a new Catalog.
// TODO: add builder func metadata like description, deprecated (all we need for the OpenAPISpec)
type Builder struct {
	groupVersion          schema.GroupVersion
	getOpenAPIDefinitions OpenAPIDefinitionsGetter
	registerFns           []func(*Catalog)

	// SchemeBuilder used to register functions for managing rpc method's request and
	// response types.
	// NOTE: this object is required to allow registration of automatically generated
	// conversions func.
	// TODO: investigate why func does not get registered if this is not a pointer
	*runtime.SchemeBuilder
}

// NewBuilder returns a new builder for all the rpc services of a given group version.
func NewBuilder(gv schema.GroupVersion) *Builder {
	return &Builder{
		groupVersion:  gv,
		SchemeBuilder: &runtime.SchemeBuilder{},
	}
}

// RegisterOpenAPIDefinitions registers a func returning all the openapi definitions for
// request and responses type for all the runtime hooks.
// NOTE: the OpenAPIDefinitionsGetter are automatically generated by openapi-gen.
func (bld *Builder) RegisterOpenAPIDefinitions(getter OpenAPIDefinitionsGetter) *Builder {
	bld.registerFns = append(bld.registerFns, func(c *Catalog) {
		c.RegisterOpenAPIDefinitions(bld.groupVersion, getter)
	})
	return bld
}

// RegisterHook register a Hook and its request and response types.
func (bld *Builder) RegisterHook(hook Hook, input, output runtime.Object) *Builder {
	bld.registerFns = append(bld.registerFns, func(c *Catalog) {
		c.RegisterHook(bld.groupVersion, hook, input, output) // TODO: consider if to pass an hook descriptor
	})
	return bld
}

// AddToCatalog adds all registered rpc services and the corresponding request and response
// to the catalog.
func (bld *Builder) AddToCatalog(c *Catalog) {
	for _, f := range bld.registerFns {
		f(c)
	}
	bld.SchemeBuilder.AddToScheme(c.scheme)
}
